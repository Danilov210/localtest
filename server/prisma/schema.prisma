generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// Define the Enum
enum AccountStatus {
    Active
    Suspended
    Banned
}

enum Transaction {
    Number
    Deposit
    Withdrawal
    TicketPurchase
    Winnings
}

model User {
    id                 String        @id @default(auto()) @map("_id") @db.ObjectId
    name               String?
    email              String        @unique
    image              String?
    //password           String
    //DataOfBirth        DateTime?
    //PhoneNumber        String?
    //balance            Float
    //playHistory        Json[]
    //ticketPurchases    Json[]
    //accountStatus      AccountStatus @default(Active)
    //transactionHistory Transaction[]
    Ticket             Ticket[]

    bookedVisits     Json[]
    favResidenceID   String[]    @db.ObjectId
    ownedResidencies Residency[] @relation("Owner")
}

model Residency {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String
    price       Int
    address     String
    city        String
    country     String
    image       String
    facilities  Json
    userEmail   String
    owner       User     @relation("Owner", fields: [userEmail], references: [email])
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@unique(fields: [address,userEmail])
}

model LotteryLike {
    id             String        @id @default(auto()) @map("_id") @db.ObjectId
    title          String // Name of the lottery
    description    String? // Description of the lottery (optional)
    startDate      DateTime // Start date of the lottery
    endDate        DateTime // End date of the lottery
    ticketPrice    Float // Price per ticket
    totalTickets   Int // Total number of tickets available
    soldTickets    Int           @default(0) // Number of tickets sold
    winningNumbers String? // Winning numbers (optional until the draw happens)
    status         LotteryStatus @default(Open) // Status of the lottery
    createdAt      DateTime      @default(now()) // Timestamp when the lottery was created
    updatedAt      DateTime      @updatedAt // Timestamp when the lottery was last updated
    tickets        Ticket[] // Relation to the Ticket model (each lottery can have multiple tickets)
}

enum LotteryStatus {
    Open
    Closed
    Completed
    Canceled
}

model Ticket {
    id           String       @id @default(auto()) @map("_id") @db.ObjectId
    lottery      LotteryLike     @relation(fields: [lotteryId], references: [id])
    lotteryId    String       @db.ObjectId // Foreign key to the Lottery model with ObjectId type
    user         User         @relation(fields: [userId], references: [id])
    userId       String       @db.ObjectId // Foreign key to the User model with ObjectId type
    ticketNumber String // Unique ticket number
    purchaseDate DateTime     @default(now()) // Timestamp when the ticket was purchased
    status       TicketStatus @default(Active) // Status of the ticket
}

enum TicketStatus {
    Active
    Canceled
    Ended
    Won
}
